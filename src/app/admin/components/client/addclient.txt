import { useState, ChangeEvent } from "react";
import { handleSubmit } from "./addClientHandler";

const ModalClient = () => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [imageFile, setImageFile] = useState<File | null>(null);
  const [imageUrl, setImageUrl] = useState<string>("");
  const [imageLink, setImageLink] = useState<string>("");
  const [name, setName] = useState<string>("");

  const toggleModal = () => {
    setIsModalOpen(!isModalOpen);
  };

  const handleImageFileChange = (e: ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      setImageFile(file);
      setImageUrl(URL.createObjectURL(file));
      setImageLink(""); // Reset link input if file is selected
    }
  };

  const handleImageLinkChange = (e: ChangeEvent<HTMLInputElement>) => {
    setImageLink(e.target.value);
    setImageFile(null); // Reset file input if link is provided
    setImageUrl(e.target.value); // Set imageUrl to the link
  };

  const handleNameChange = (e: ChangeEvent<HTMLInputElement>) => {
    setName(e.target.value);
  };

  return (
    <div>
      {/* Modal toggle */}
      <button
        onClick={toggleModal}
        className="block text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
        type="button"
      >
        Tambah Client
      </button>
      {/* Main modal */}
      {isModalOpen && (
        <div
          id="crud-modal"
          aria-hidden="true"
          className="fixed top-0 right-0 left-0 z-50 flex justify-center items-center w-full h-full overflow-y-auto overflow-x-hidden bg-black bg-opacity-50"
        >
          <div className="relative p-4 w-full max-w-md max-h-full">
            {/* Modal content */}
            <div className="relative bg-white rounded-lg shadow dark:bg-gray-700">
              {/* Modal header */}
              <div className="flex items-center justify-between p-4 md:p-5 border-b rounded-t dark:border-gray-600">
                <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                  Create New Client
                </h3>
                <button
                  type="button"
                  className="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ms-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white"
                  onClick={toggleModal}
                >
                  <svg
                    className="w-3 h-3"
                    aria-hidden="true"
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 14 14"
                  >
                    <path
                      stroke="currentColor"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth="2"
                      d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"
                    />
                  </svg>
                  <span className="sr-only">Close modal</span>
                </button>
              </div>
              {/* Modal body */}
              <form
                className="p-4 md:p-5"
                onSubmit={(e) =>
                  handleSubmit(
                    e,
                    name,
                    imageFile,
                    imageLink,
                    setImageFile,
                    setImageLink,
                    setImageUrl,
                    toggleModal
                  )
                }
              >
                <div className="grid gap-4 mb-4 grid-cols-2">
                  <div className="col-span-2">
                    <label
                      htmlFor="name"
                      className="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
                    >
                      Name
                    </label>
                    <input
                      type="text"
                      name="name"
                      id="name"
                      className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
                      placeholder="Type client name"
                      onChange={handleNameChange}
                      value={name}
                    />
                  </div>
                  <div className="col-span-2">
                    <label
                      htmlFor="imageFile"
                      className="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
                    >
                      Upload Image
                    </label>
                    <input
                      type="file"
                      name="imageFile"
                      id="imageFile"
                      accept="image/*"
                      className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
                      onChange={handleImageFileChange}
                      disabled={!!imageLink}
                    />
                  </div>
                  <div className="col-span-2">
                    <label
                      htmlFor="imageLink"
                      className="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
                    >
                      Image Link
                    </label>
                    <input
                      type="text"
                      name="imageLink"
                      id="imageLink"
                      className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
                      placeholder="Type or paste image link"
                      onChange={handleImageLinkChange}
                      value={imageLink}
                      disabled={!!imageFile}
                    />
                  </div>
                  {imageUrl && (
                    <div className="col-span-2">
                      <img src={imageUrl} alt="Selected" className="rounded-lg" />
                    </div>
                  )}
                </div>
                <button
                  type="submit"
                  className="text-white inline-flex items-center bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
                >
                  <svg
                    className="me-1 -ms-1 w-5 h-5"
                    fill="currentColor"
                    viewBox="0 0 20 20"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      fillRule="evenodd"
                      d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z"
                      clipRule="evenodd"
                    ></path>
                  </svg>
                  Add new client
                </button>
              </form>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ModalClient;


















addClientHandler



// src/utils/addClientHandler.tsx
import { insertClient } from "../../../../utils/clientAPI";

export const uploadImage = async (file: File): Promise<string> => {
  const formData = new FormData();
  formData.append("file", file);

  const response = await fetch("/api/upload", {
    method: "POST",
    body: formData,
  });

  if (!response.ok) {
    throw new Error("Failed to upload image");
  }

  const data = await response.json();
  return data.filePath; // Assuming the response contains the file path
};

export const handleSubmit = async (
  e: React.FormEvent<HTMLFormElement>,
  name: string,
  imageFile: File | null,
  imageLink: string,
  setImageFile: React.Dispatch<React.SetStateAction<File | null>>,
  setImageLink: React.Dispatch<React.SetStateAction<string>>,
  setImageUrl: React.Dispatch<React.SetStateAction<string>>,
  toggleModal: () => void
) => {
  e.preventDefault();
  let image = imageLink;

  if (imageFile) {
    try {
      const filePath = await uploadImage(imageFile);
      image = filePath;
    } catch (error) {
      console.error("Failed to upload image:", error);
      alert("Failed to upload image");
      return;
    }
  }

  if (!name || !image) {
    alert("Name and image are required");
    return;
  }

  try {
    const newClient = { name, image };
    await insertClient(newClient);
    alert("Client added successfully");
    toggleModal(); // Close the modal
    // Reset fields
    setImageFile(null);
    setImageLink("");
    setImageUrl("");
  } catch (error) {
    console.error("Failed to add client:", error);
    alert("Failed to add client");
  }
};
